java8通过内部迭代来实现对流的处理，一个流式处理可以分为三个部分：转换成流、中间操作、终端操作。

如下图：

![流操作](./images/faa00ccc35370f5c3d816a659abe3b43.png)

以集合为例，

* 一个流式处理的操作我们首先需要调用stream()函数将其转换成流，
* 然后再调用相应的中间操作达到我们需要对集合进行的操作，比如筛选、转换等，
* 最后通过终端操作对前面的结果进行封装，返回我们需要的形式。

###一、转流操作
    调用stream()函数
####二、中间操作
我们定义一个简单的学生实体类，用于后面的例子演示：
````java
@Data
public class Student {

    /** 学号 */
    private long id;

    private String name;

    private int age;

    /** 年级 */
    private int grade;

    /** 专业 */
    private String major;

    /** 学校 */
    private String school;
}
````

````java
// 初始化
List<StudentInfo> students = new ArrayList<StudentInfo>() {
    {
        add(new StudentInfo(20160001, "孔明", 20, 1, "土木工程", "武汉大学"));
        add(new StudentInfo(20160002, "伯约", 21, 2, "信息安全", "武汉大学"));
        add(new StudentInfo(20160003, "玄德", 22, 3, "经济管理", "武汉大学"));
        add(new StudentInfo(20160004, "云长", 21, 2, "信息安全", "武汉大学"));
        add(new StudentInfo(20161001, "翼德", 21, 2, "机械与自动化", "华中科技大学"));
        add(new StudentInfo(20161002, "元直", 23, 4, "土木工程", "华中科技大学"));
        add(new StudentInfo(20161003, "奉孝", 23, 4, "计算机科学", "华中科技大学"));
        add(new StudentInfo(20162001, "仲谋", 22, 3, "土木工程", "浙江大学"));
        add(new StudentInfo(20162002, "鲁肃", 23, 4, "计算机科学", "浙江大学"));
        add(new StudentInfo(20163001, "丁奉", 24, 5, "土木工程", "南京大学"));
    }
};
````
####2.1过滤
过滤，顾名思义就是按照给定的要求对集合进行筛选满足条件的元素，java8提供的筛选操作包括：filter、distinct、limit、skip。

filter

在前面的例子中我们已经演示了如何使用filter，其定义为：`Stream<T> filter(Predicate<? super T> predicate)`，
* filter接受一个谓词Predicate，我们可以通过这个谓词定义筛选条件，

* 在介绍lambda表达式时我们介绍过Predicate是一个函数式接口，其包含一个test(T t)方法，该方法返回boolean。

太多了看这个类里面写的吧：
````java
StreamDemo2.class